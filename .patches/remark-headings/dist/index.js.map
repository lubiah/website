{"version":3,"sources":["../src/index.ts"],"names":["headings"],"mappings":";AACA,OAAO,aAAa;AACpB,SAAS,aAAa;AACtB,SAAS,gBAAgB;AASV,SAAR,WAA4B;AAClC,SAAO,eAAe,YAAY,MAAY,OAAY;AACzD,UAAMA,YAA+B,CAAC;AACtC,UAAM,UAAU,IAAI,QAAQ;AAE5B,aAAS,oBAAoB,MAAe;AAC3C,YAAM,IAAiB;AAAA,QACtB,IAAI,QAAQ,KAAK,SAAS,IAAI,CAAC;AAAA,QAC/B,OAAO,KAAK;AAAA,QACZ,OAAO,SAAS,IAAI;AAAA,MACrB;AAEA,MAAAA,UAAS,KAAK,CAAC;AAAA,IAChB;AAEA,aAAS,kBAAkBA,WAAkD;AAC5E,YAAM,OAAoB,EAAE,OAAO,EAAE;AACrC,YAAM,UAA8B,CAAC;AACrC,UAAI,WAAW;AAEf,MAAAA,UAAS,QAAQ,CAAC,YAAY;AAhCjC;AAiCI,YAAI,QAAQ,QAAQ,SAAS,OAAO;AACnC,cAAI,SAAS,aAAa,QAAW;AACpC,qBAAS,WAAW,CAAC;AAAA,UACtB;AACA,kBAAQ,KAAK,QAAQ;AAAA,QACtB,WAAW,QAAQ,QAAQ,SAAS,OAAO;AAC1C,iBAAO,QAAQ,QAAQ,SAAS,CAAC,EAAE,SAAS,QAAQ,OAAO;AAC1D,oBAAQ,IAAI;AAAA,UACb;AAAA,QACD;AAEA,sBAAQ,QAAQ,SAAS,CAAC,EAAE,aAA5B,mBAAsC,KAAK;AAC3C,mBAAW;AAAA,MACZ,CAAC;AAED,aAAO,KAAK,YAAY,CAAC;AAAA,IAC1B;AAEA,UAAM,MAAM,WAAW,mBAAmB;AAC1C,QAAI,CAAC,MAAM,KAAK;AAAI,YAAM,KAAK,KAAK,CAAC;AACrC,UAAM,KAAK,GAAG,WAAW,kBAAkBA,SAAQ;AAAA,EACpD;AACD","sourcesContent":["import type { Heading, Root } from 'mdast';\nimport Slugger from \"github-slugger\";\nimport { visit } from 'unist-util-visit';\nimport { toString } from 'mdast-util-to-string';\n\nexport type HeadingItem = {\n\tid?: string;\n\tdepth: number;\n\tvalue?: string;\n\tchildren?: Array<HeadingItem>;\n};\n\nexport default function headings() {\n\treturn async function transformer(tree: Root, vFile: any) {\n\t\tconst headings: Array<HeadingItem> = [];\n\t\tconst slugger = new Slugger();\n\n\t\tfunction getFlatHeadingsList(node: Heading) {\n\t\t\tconst h: HeadingItem = {\n\t\t\t\tid: slugger.slug(toString(node)),\n\t\t\t\tdepth: node.depth,\n\t\t\t\tvalue: toString(node)\n\t\t\t};\n\n\t\t\theadings.push(h);\n\t\t}\n\n\t\tfunction buildHeadingsTree(headings: Array<HeadingItem>): Array<HeadingItem> {\n\t\t\tconst root: HeadingItem = { depth: 0 };\n\t\t\tconst parents: Array<HeadingItem> = [];\n\t\t\tlet previous = root;\n\n\t\t\theadings.forEach((heading) => {\n\t\t\t\tif (heading.depth > previous.depth) {\n\t\t\t\t\tif (previous.children === undefined) {\n\t\t\t\t\t\tprevious.children = [];\n\t\t\t\t\t}\n\t\t\t\t\tparents.push(previous);\n\t\t\t\t} else if (heading.depth < previous.depth) {\n\t\t\t\t\twhile (parents[parents.length - 1].depth >= heading.depth) {\n\t\t\t\t\t\tparents.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tparents[parents.length - 1].children?.push(heading);\n\t\t\t\tprevious = heading;\n\t\t\t});\n\n\t\t\treturn root.children || [];\n\t\t}\n\n\t\tvisit(tree, 'heading', getFlatHeadingsList);\n\t\tif (!vFile.data.fm) vFile.data.fm = {};\n\t\tvFile.data.fm.headings = buildHeadingsTree(headings);\n\t};\n}\n"]}